package game_showhand_protocols;

import "game_showhand_def.proto";
import "msg_type_def.proto";

//获得房间信息
message packetc2l_get_room_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
}

//房间信息返回
message packetl2c_get_room_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
	repeated int32 room_ids = 2;	
}

//进入游戏房间请求
message packetc2l_enter_game_room {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_c2l_enter_game_room];//packet_id
	optional int32					room_id		= 2;//房间id
}
//进入房间响应信息
message packetl2c_enter_game_room_result {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_l2c_enter_game_room_result];//packet id
	optional msg_type_def.e_msg_result_def		result		= 2;//请求返回结果
	optional int32 room_id = 3;
	repeated msg_table_info	table_list	= 4;//房间内桌子信息
	
}
//超级客户端进入房间响应信息
message packetl2c_control_enter_game_room_result {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_l2c_control_enter_game_room_result];//packet id
	optional msg_type_def.e_msg_result_def		result		= 2;//请求返回结果
	optional int32 room_id = 3;
	repeated msg_table_info	table_list	= 4;//房间内桌子信息
	
}

//退出游戏房间请求信息
message packetc2l_quit_game_room {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_c2l_quit_game_room];//packet_id
}
//退出游戏房间响应信息
message packetl2c_quit_game_room_result
{
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_l2c_quit_game_room_result];//packet id
	optional msg_type_def.e_msg_result_def		result		= 2;//请求返回结果	
	repeated int32 room_ids = 3;
}

//玩家选择桌子请求信息
message packetc2l_choose_desk {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_c2l_choose_desk];//packet id
	optional int32					table_id	= 2;//桌子ID  0为快速进入
}

//玩家选择一个桌子返回信息(都发的)
message packetl2c_choose_desk_result {
	optional e_server_msg_type		packet_id			= 1 [default = e_mst_l2c_choose_desk_result];//packet id
	optional msg_type_def.e_msg_result_def		result	= 2;//请求返回结果
	optional msg_table_info		table_info				= 3;//当前桌玩家信息
	optional int32				room_id					= 4;
	optional int32			    table_state	= 5;//桌子ID  0为快速进入
}

//控制客户端选择需要踢机器人的桌子
message packetc2l_remove_rob_desk {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_c2l_remove_rob_desk];//packet id
	optional int32					table_id	= 2;//桌子ID  0为快速进入
}

//控制客户端选择需要踢机器人的桌子返回信息
message packetl2c_remove_rob_desk_result {
	optional e_server_msg_type		packet_id			= 1 [default = e_mst_l2c_remove_rob_desk_result];//packet id
	optional msg_type_def.e_msg_result_def		result	= 2;//请求返回结果
}



//请求桌子内场景信息
message packetc2l_get_table_scene_info 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
}

//获得桌子内场景信息		//进入桌子跟断线重连情况下调用
message packetl2c_get_table_scene_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
	optional msg_table_info table_info = 2;//玩家详细信息
	repeated p_bet_state bet_state 	    =3;//状态
	optional int32 bet_time				=4;//下注剩余时间
	optional int64 left_betcount		=5;//先前总下注
	optional int64 right_betcount		=6; 
	optional int64 minBetCount			=7;//最小下注	
    optional int32 roomId			=8;//房间id	
    optional int64 left_count			=9;	
    optional int64 right_count			=10;	
}

//离开桌子到房间请求信息
message packetc2l_quit_desk 
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_c2l_quit_desk];//packet id
}
//离开桌子到房间响应信息
message packet_l2c_quit_desk_result {
	optional e_server_msg_type		packet_id	= 1 [default = e_mst_l2c_quit_desk_result];//packet id
	optional msg_type_def.e_msg_result_def		result		= 2;//请求返回结果
	repeated msg_table_info	table_list	= 3;//房间内桌子信息
	optional int32				room_id					= 4;
}


//玩家进入准备状态请求信息A 
message packetc2l_player_ready {
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_c2l_player_ready];//packet id
}

//玩家请求准备状态 返回信息 A B
message packetl2c_player_ready_result {
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_player_ready_result];//packet id
	optional msg_type_def.e_msg_result_def		result	= 2;//请求返回结果	
	optional int32					player_id		= 3;//player id
}

//玩家看底牌请求信息A 
message packetc2l_view_card {
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_c2l_view_card];//packet id
}
//玩家看底响应信息B
message packetl2c_view_card_result {
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_view_card_result];//packet id
	optional int32					player_id		= 2;//看牌的玩家id
}

//玩家下注 请求信息
message packetc2l_bet_info {
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_c2l_bet_info];//packet id
	optional msg_bet_info			bet_info		= 2;//下注信息
}
//返回玩家下注结果是否正确
message packetl2c_bet_info_result
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_bet_result];//packet id
	optional msg_type_def.e_msg_result_def		result	= 2;//请求返回结果	
	optional msg_bet_info			bet_info		= 3;//下注信息
	optional int64                  bet_count = 4;//之前总下注
	optional int32					player_id		= 5;//看牌的玩家id
}

//通知，开始游戏，发送游戏开始的数据
message packetl2c_notice_start_game_message 
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_start_game_message];
	optional int64 minBetCount=2;
	optional msg_player_info player_left =3;
	optional msg_player_info player_right =4;
	repeated p_bet_state bet_state	 =5;//两个玩家的下注状态
}

//通知，开始游戏，发送游戏开始的数据
message packetl2c_notice_control_message 
{
	optional e_server_msg_type		packet_id = 1 [default = e_mst_l2c_notice_control_message];
	optional msg_player_info player_info = 2;
}

//通知，发牌消息（都返回）
message packetl2c_notice_sendcard_message
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_sendcard_message];
	optional int32 player_left =2;
	optional int32 player_right =3;
	repeated p_bet_state bet_state	 =4;//两个玩家的下注状态
	
}
//通知，下注信息（都返回）
message packetl2c_notice_bet
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_start_bet_message];
	repeated p_bet_state bet_state	 =2;//两个玩家的下注状态
}

//通知，发放奖励（都返回）
message packetl2c_notice_award_message 
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_start_award_message];
	optional msg_player_result player_left = 2;
	optional msg_player_result player_right = 3;	
}
message packetl2c_notice_check_message 
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_check_message];
}

//通知，玩家加入桌子（给不在桌子里的人发通知）
message packetl2c_notice_join_table
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_join_table_message];
	optional int32 table_id = 2;
	optional msg_player_info player_info =3;
}

//通知，玩家离开桌子（给不在桌子里的人发通知）
message packetl2c_notice_leave_table
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_leave_table_message];
	optional int32 table_id = 2;
	optional int32 player_id = 3;
}
//通知控制客户端刷新桌子信息
message packetl2c_notice_update_table
{
	optional e_server_msg_type		packet_id		= 1 [default = e_mst_l2c_notice_update_table_message];
	optional int32 table_id = 2;
	optional msg_player_info player_left = 3;		//左边玩家
	optional msg_player_info player_right = 4;		//右边玩家
}

//通知，桌子里玩家的状态
message packetl2c_notice_table_player_state
{
	optional e_server_msg_type		packet_id		= 1 [default =e_mst_l2c_notice_table_player_message];
	optional uint32 table_id=		2;
	optional uint32 left_state= 	3;//桌子里玩家状态（1：未准备，2：准备，3：游戏中）	
	optional uint32 right_state=	4;

}

//检测游戏状态		//重连之后判断是否在桌子中
message packetc2l_check_state {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
}

//检测状态
message packetl2c_check_state_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
	optional uint32 state = 2; //1:大厅里,2:房间里,3:桌子里
}

//-----------------------------------------------控制客户端协议内容------------------------------------------------
//控制自己下盘赢
message packetc2l_control_info
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_win_info];
	optional int32 win = 2;//1 表示控制自己输，2表示控制自己赢
}
message packetl2c_control_change_result 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success ];
}
//------------------库存Debug信息----------------------------------

message packetl2c_notice_gm_luck_info 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];	
	optional int64 Total_Luck=2;
	optional int64 add_luck=3; 
}
message packetl2c_offline_time {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_offline_time];
	optional int32 player_id				=2;//玩家id
	optional int32 offline_state		    =3;//玩家状态  0掉线  1重上
	optional int32 bet_time				    =4;//下注剩余时间
	optional int32 bet_player_id				    =5;//下注玩家的id

}
message packetl2c_notice_out_time {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_time];
	optional int32 out_state				=2;//是否超时
}

//------------------库存Debug信息----------------------------------

//debug信息
message packetl2c_bc_debuginfo {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
	optional int32 player_id = 2;	
	optional int64 total_profit = 3[default = 0];		//抽水
	optional int64 total_stock = 4[default = 0];		//库存
    optional int64 total_Rate = 6[default = 0];		//抽水率

	optional string debug_infos = 5; //调试信息 lua
}

