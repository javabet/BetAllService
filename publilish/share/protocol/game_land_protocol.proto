package game_land_protocols;

import "game_land_def.proto"; 
import "msg_type_def.proto"; 

//玩家信息
message msg_player_info{
	optional int32 player_id = 1;			//玩家ID
	optional string player_name = 2;		//玩家昵称
	optional int32 head_frame = 3;			//头像框
	optional string head_custom = 4;		//玩家头像
	optional int64 player_gold = 5;			//玩家金币
	optional int32 player_sex = 6;			//玩家性别	
	optional int32 vip_level = 7;			//Vip等级
}

//检测游戏状态		//重连之后判断是否在桌子中
message packetc2l_check_state {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
}

//检测状态
message packetl2c_check_state_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
	optional int32 result = 2 [default = 0]; // 0:不在,1:在room中,2:在table中
}

//获取场景信息
message packetc2l_get_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
}

//room场景信息
message msg_room_scene_info {
	optional bool ready = 1; 			//
}

//score场景信息
message msg_score_scene_info {
	optional int32 current_user = 1;	//当前玩家
	optional int32 remain_seconds = 2;	//剩余秒数
	repeated int32 score_info = 3;		//[3]叫分信息,0(不叫),1,2,4,8,255(没轮到),88(不qiang)
	repeated bool user_trustee = 4;		//[3]托管信息
	repeated int32 cards_info = 5;		//[17]扑克列表
}

//加倍场景信息
message msg_times_scene_info {
	optional int32 remain_seconds = 1;		//剩余秒数
	repeated bool user_trustee = 2;			//[3]托管信息
	repeated int32 cards_info = 3;			//[17]扑克列表
	optional int32 land_user = 4;			//地主玩家
	optional int32 land_score = 5;			//地主分数
	repeated int32 back_card = 6;			//[3]底牌扑克	
}

//playing场景信息
message msg_playing_scene_info {
	optional int32 land_chair_id = 1;		//地主玩家
	optional int32 land_score = 2;			//地主分数	1,2,4,8
	optional int32 current_user = 3;		//当前玩家
	optional int32 remain_seconds = 4;		//剩余秒数
	repeated bool user_trustee = 5;			//[3]托管信息
	repeated int32 remain_card_cnt = 6;		//[3]剩余扑克数
	repeated int32 back_card = 7;			//[3]底牌扑克
	repeated int32 cards_info = 8;			//[20]扑克列表
	repeated int32 turn_cards1 = 9;			//[chair1]出牌列表  [空=不出,255=没轮到....]
	repeated int32 turn_cards2 = 10;		//[chair2]出牌列表
	repeated int32 turn_cards3 = 11;		//[chair3]出牌列表
	optional bool new_turn = 12;			//新的一轮
	optional int32 bomb_time = 13;			//炸弹倍数
	repeated int32 out_cards = 14;			//已出牌列表
	optional int32 score_times = 15;		//1, 2
}

//场景信息返回
message packetl2c_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
	optional int32 room_type = 2; 	//房间类型	
	optional msg_room_scene_info scene_info1 = 3;
	optional msg_score_scene_info scene_info2 = 4;
	optional msg_playing_scene_info scene_info3 = 5;
	optional int32 info_type = 6;
	optional packetl2c_game_end scene_info4 = 7;
	optional int32 land_chair_id4 = 8;		//地主玩家
	optional int32 land_score4 = 9;			//地主分数
	optional int32 score_times4 = 10;			//1, 2		
	optional int32 task_id = 11 [default = -1];				//	info_type = 2,3,4,5
	repeated int32 times = 12;				//[3]加倍阶段 [0:未选择, 1:不加倍, 2:加倍]
	optional msg_times_scene_info scene_info5 = 13;
	optional int32 play_cnt = 14;			//	
}

//玩家进房间
message packetc2l_enter_room {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
	optional int32 room_type = 2;					//房间类型
}

//玩家进房间返回
message packetl2c_enter_room_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//玩家退出房间
message packetc2l_leave_room {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
}

//玩家退出房间返回
message packetl2c_leave_room_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
	optional int64 player_gold = 2;
}

//玩家托管请求
message packetc2l_user_trustee {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
	optional bool trustee = 2;
}

//玩家托管通知
message packetl2c_user_trustee_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
	optional int32 chair_id = 2;
	optional bool trustee = 3;
	optional int32 remain_seconds = 4;		//剩余秒数, trustee == false 时有效
}

//玩家已准备
message packetc2l_ready {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
}

//发送玩家信息
message packetl2c_send_all_playerinfos {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
	repeated msg_player_info player_info = 2;		//[3]玩家信息
}

//发送扑克
message packetl2c_send_all_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
	optional int32 current_user = 2;				//当前玩家
	repeated bool user_trustee = 3;					//[3]托管信息
	
	// 
	repeated int32 cards_info = 4;					//[17]扑克列表
	repeated int32 cards_info2 = 5;					//[17]扑克列表
	repeated int32 cards_info3 = 6;					//[17]扑克列表
	repeated int32 back_card = 7;					//[3]底牌扑克
	optional bool BotBanker = 8;					//当前玩家
	optional int32 room_id = 9;						//
	optional int32 task_id = 10;					//
	repeated int32 bot_landlords = 11;				//
	optional int32 play_cnt = 12;					//
	optional int32 four_take = 13;					//
    optional bool new_score = 14;                    //	
}

//用户叫分
message packetc2l_land_score {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
	optional bool score = 2;
}

//用户叫分
message packetl2c_land_score {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
	optional int32 land_user = 2;			//叫分玩家
	optional int32 current_user = 3;		//当前玩家
	optional int32 land_score = 4;			//上次叫分
	optional int32 current_score = 5;		//当前叫分
}

//游戏开始
message packetl2c_game_start {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
	optional int32 land_user = 2;			//地主玩家
	optional int32 land_score = 3;			//地主分数
	repeated int32 back_card = 4;			//[3]底牌扑克
	optional int32 score_times = 5;			//1, 2	
	optional int32 remain_seconds = 6;		//剩余秒数	
	optional bool need_times = 7;			//
	repeated int32 times_score = 8;			//[3]底牌扑克
}	

//用户加倍
message packetc2l_times {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
	optional int32 times = 2;				//是否加倍 [0:未选择, 1:不加倍, 2:加倍]
}	

//加倍通知
message packetl2c_times_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
	optional int32 chair_idx = 2;			//加倍玩家 [ 0, 1, 2 ]
	optional int32 times = 3;				//是否加倍 [0:未选择, 1:不加倍, 2:加倍]
}	

//游戏开始
message packetl2c_really_game_start {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
}	

//出牌数据包
message packetc2l_out_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
	repeated int32 cards = 2;				//出牌数据
}

//用户出牌
message packetl2c_out_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
	optional int32 out_card_user = 2;		//出牌玩家
	optional int32 current_user = 3;		//当前玩家
	optional int32 bomb_time = 4;			//炸弹倍数
	repeated int32 cards = 5;				//出牌数据
}

//用户不出
message packetl2c_pass_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
	optional int32 pass_card_user = 2;		//不出玩家
	optional int32 current_user = 3;		//当前玩家
	optional bool new_turn = 4;				//新的一轮
}

//游戏结束
message packetl2c_game_end {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
	repeated int32 bomb_time = 2;			//[3]炸弹倍数
	repeated int32 game_score = 3;			//[3]当前金币
	repeated bool leave_game = 4;			//[3]逃跑标记
	optional bool spring = 5;
	repeated int32 cards1 = 6;				//扑克数据
	repeated int32 cards2 = 7;				//扑克数据
	repeated int32 cards3 = 8;				//扑克数据
	repeated bool limited = 9;				//获利限定
	optional int32 task_ok = 10;			//
	repeated bool low_limited = 11;			//输钱限定
}

//玩家通知消息
message packetl2c_game_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
	optional e_notify_type notify_type = 2;
}

//举报功能
message packetc2l_report {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
	optional int32 chair_idx = 2;
}

message packetl2c_report_res {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
	optional int32 chair_idx = 2;			//-1:error
}
