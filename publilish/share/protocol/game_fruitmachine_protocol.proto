package game_fruitmachine_protocols;

import "game_fruitmachine_def.proto"; 
import "msg_type_def.proto"; 



//房间信息    
message msg_room_info{
	optional int32 roomid = 1;		
}

//获得房间信息
message packetc2l_get_room_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
}

//房间信息返回
message packetl2c_get_room_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
	repeated msg_room_info room_list = 2;	
}

//进入房间
message packetc2l_enter_room {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
	optional int32 roomid = 2;
}

//进入房间返回
message packetl2c_enter_room_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//检测游戏状态		//重连之后判断是否在桌子中
message packetc2l_check_state {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
}

//检测是否在房间中,检测状态
message packetl2c_check_state_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
	optional bool is_intable = 2 [default = false];//是否在房间中
}

//请求桌子内场景信息
message packetc2l_get_room_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
}

//获得桌子内场景信息		//进入桌子跟断线重连情况下调用
message packetl2c_get_room_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
	optional int32 room_id = 2;
	repeated int32 history_list = 3;
	optional e_game_state game_state = 4;	//游戏状态
	repeated msg_bet_info bet_info = 5;		//下注信息,断线重连用
	optional int32 reward_gold = 6;			//中奖金额,断线重连用
	optional int32 result_index = 7;		//中奖项,断线重连用
	repeated int32 index_array = 8;
	optional int64 gold = 9;				//玩家金币
	optional int64 bigsmall_gold = 10;		//比大小金币
	repeated msg_player_info player_list = 11;//其他玩家信息
}

//离开
message packetc2l_leave_room {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
}

//离开返回
message packetl2c_leave_room_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
}

//下注
message packetc2l_add_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
	optional msg_bet_info bet_info = 2;
}

//下注返回
message packetl2c_add_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
	optional msg_bet_info bet_info = 3;
}

//续压
message packetc2l_repeat_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
}

//续压返回
message packetl2c_repeat_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
	repeated msg_bet_info bet_info = 3;
}

//开始游戏
message packetc2l_start_game {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_game];
}

//开始游戏返回结果
message packetl2c_start_game_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
	optional int32 index = 3;
	repeated msg_result_index indexAarry = 4;
	optional int32 reward = 5;//押注盈利，非纯盈利
}

//开始大小
message packetc2l_start_bigsmall {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_bigsmall];
    optional bool  betisbig = 2;//押注是大
	optional int32 bet_count = 3;//押注金钱
}

//比大小返回结果
message packetl2c_start_bigsmall_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_bigsmall];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
    optional bool  betisbig = 3;//押注是大
    optional bool  resultisbig = 4;//结果是大
	optional int32 reward = 5;
	optional int32 left_count = 6;	//剩余次数
	optional int32 water = 7;
	optional int32 point = 8;	//点数
}

//中止比大小
message packetc2l_break_bigsmall
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_break_bigsmall];
}

//中止比大小结果
message packetl2c_break_bigsmall_result
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_break_bigsmall_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
	optional int32 water = 3;
}

//取消下注
message packetc2l_cancel_bet
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
}

//取消下注结果
message packetl2c_cancel_bet_result
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail ];
}

//桌子进玩家通知
message packetl2c_enter_player_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
	optional msg_player_info player_info = 2;
}

//桌子退玩家通知
message packetl2c_leave_player_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
	optional int32 player_id = 2;
}

//玩家钱变化
message packetl2c_player_change_money {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_change_money];
	optional int32 player_id = 2;
	optional int64 cur_money = 3;
	optional int32 result_index = 4;
}

//玩家信息
message msg_player_info {
	optional int32 player_id = 1;				//玩家ID
	optional string player_nickname = 2;		//玩家昵称
	optional int32 player_head_frame = 3;		//头像框
	optional string player_head_custom = 4;		//玩家头像
	optional int64 player_gold = 5;				//玩家金币
	optional int32 player_sex = 6;				// 玩家性别	
	optional int32 player_vip_lv = 7;			// Vip等级
	optional int32 player_seat = 8;			// 座位号	(0~3)
}

//玩家信息
message player_info {
	optional int32 playerid = 1;				//玩家ID
	optional string nickname = 2;				//玩家昵称
	optional int64 gold = 3;					//玩家金币
	optional int64 profit = 4;					//玩家盈亏
	optional int32 control = 5;					//控制次数
	optional int32 cur_ctrl = 6;				//已控制次数
}

//玩家列表
message packetl2c_player_list
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_list];
	repeated player_info list = 2;
	optional int64 stock = 3;	//库存
	optional int64 profit = 4;	//盈利
}

//调试
message packetc2l_debug {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
	optional int32 playerid = 2;		//控制玩家
	optional int32 count = 3;			//控制次数
}

message packetl2c_debug_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];	
}









