// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_guanyuan_def.proto

package game_guanyuan_protocols;

public final class GameGuanyuanDef {
  private GameGuanyuanDef() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code game_guanyuan_protocols.e_server_msg_type}
   */
  public enum e_server_msg_type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>e_mst_start_c2l = 10000;</code>
     *
     * <pre>
     *客户端到服务端
     * </pre>
     */
    e_mst_start_c2l(0, 10000),
    /**
     * <code>e_mst_c2l_get_scene_info = 10001;</code>
     *
     * <pre>
     *得到房间
     * </pre>
     */
    e_mst_c2l_get_scene_info(1, 10001),
    /**
     * <code>e_mst_c2l_leave_room = 10003;</code>
     *
     * <pre>
     *离开房间
     * </pre>
     */
    e_mst_c2l_leave_room(2, 10003),
    /**
     * <code>e_mst_c2l_action = 10004;</code>
     *
     * <pre>
     *动作请求:摸牌，打牌，碰,明杠，暗杠,吃，胡
     * </pre>
     */
    e_mst_c2l_action(3, 10004),
    /**
     * <code>e_mst_c2l_ready = 10005;</code>
     *
     * <pre>
     *请求准备操作
     * </pre>
     */
    e_mst_c2l_ready(4, 10005),
    /**
     * <code>e_mst_c2l_gps = 10006;</code>
     *
     * <pre>
     *更新玩家的gps信息状态
     * </pre>
     */
    e_mst_c2l_gps(5, 10006),
    /**
     * <code>e_mst_c2l_dis_room = 10007;</code>
     *
     * <pre>
     *请求解散
     * </pre>
     */
    e_mst_c2l_dis_room(6, 10007),
    /**
     * <code>e_mst_c2l_dis_agree_or_not = 10008;</code>
     *
     * <pre>
     *同意或是不同意解散游戏
     * </pre>
     */
    e_mst_c2l_dis_agree_or_not(7, 10008),
    /**
     * <code>e_mst_c2l_check_state = 10010;</code>
     *
     * <pre>
     *检测游戏状态
     * </pre>
     */
    e_mst_c2l_check_state(8, 10010),
    /**
     * <code>e_mst_c2l_debug = 11000;</code>
     *
     * <pre>
     *控制
     * </pre>
     */
    e_mst_c2l_debug(9, 11000),
    /**
     * <code>e_mst_start_l2c = 15000;</code>
     *
     * <pre>
     * 服务端到客户端---------------------------------------------------------------------------
     * </pre>
     */
    e_mst_start_l2c(10, 15000),
    /**
     * <code>e_mst_l2c_get_scene_info_result = 15001;</code>
     *
     * <pre>
     *得到房间返回
     * </pre>
     */
    e_mst_l2c_get_scene_info_result(11, 15001),
    /**
     * <code>e_mst_l2c_enter_room_result = 15002;</code>
     *
     * <pre>
     *进入房间
     * </pre>
     */
    e_mst_l2c_enter_room_result(12, 15002),
    /**
     * <code>e_mst_l2c_leave_room_result = 15003;</code>
     *
     * <pre>
     *离开房间
     * </pre>
     */
    e_mst_l2c_leave_room_result(13, 15003),
    /**
     * <code>e_mst_l2c_action_result = 15004;</code>
     *
     * <pre>
     *玩家通知请求返回		
     * </pre>
     */
    e_mst_l2c_action_result(14, 15004),
    /**
     * <code>e_mst_l2c_ready_result = 15005;</code>
     *
     * <pre>
     *玩家广播准备状态
     * </pre>
     */
    e_mst_l2c_ready_result(15, 15005),
    /**
     * <code>e_mst_l2c_gps_result = 15006;</code>
     *
     * <pre>
     *gps信息反馈
     * </pre>
     */
    e_mst_l2c_gps_result(16, 15006),
    /**
     * <code>e_mst_l2c_dis_room_result = 15007;</code>
     *
     * <pre>
     *请求解散信息反馈
     * </pre>
     */
    e_mst_l2c_dis_room_result(17, 15007),
    /**
     * <code>e_mst_l2c_dis_agree_or_not_result = 15008;</code>
     *
     * <pre>
     *玩家同意或是不同意解散游戏的广播
     * </pre>
     */
    e_mst_l2c_dis_agree_or_not_result(18, 15008),
    /**
     * <code>e_mst_l2c_check_state_result = 15010;</code>
     *
     * <pre>
     *检测游戏状态
     * </pre>
     */
    e_mst_l2c_check_state_result(19, 15010),
    /**
     * <code>e_mst_l2c_game_start_nt = 15200;</code>
     *
     * <pre>
     *广播玩家游戏开始了
     * </pre>
     */
    e_mst_l2c_game_start_nt(20, 15200),
    /**
     * <code>e_mst_l2c_circle_start_nt = 15201;</code>
     *
     * <pre>
     *游戏开始
     * </pre>
     */
    e_mst_l2c_circle_start_nt(21, 15201),
    /**
     * <code>e_mst_l2c_dice_nt = 15202;</code>
     *
     * <pre>
     *掷骰子
     * </pre>
     */
    e_mst_l2c_dice_nt(22, 15202),
    /**
     * <code>e_mst_l2c_init_card_nt = 15203;</code>
     *
     * <pre>
     *初始化玩家手牌
     * </pre>
     */
    e_mst_l2c_init_card_nt(23, 15203),
    /**
     * <code>e_mst_l2c_trun_index_nt = 15204;</code>
     *
     * <pre>
     *提示玩家指向
     * </pre>
     */
    e_mst_l2c_trun_index_nt(24, 15204),
    /**
     * <code>e_mst_l2c_replace_flower_nt = 15205;</code>
     *
     * <pre>
     *补花
     * </pre>
     */
    e_mst_l2c_replace_flower_nt(25, 15205),
    /**
     * <code>e_mst_l2c_player_action_nt = 15206;</code>
     *
     * <pre>
     *提示某个玩家的可以进行的保重
     * </pre>
     */
    e_mst_l2c_player_action_nt(26, 15206),
    /**
     * <code>e_mst_l2c_action_nt = 15207;</code>
     *
     * <pre>
     *广播给所有的玩家，某个
     * </pre>
     */
    e_mst_l2c_action_nt(27, 15207),
    /**
     * <code>e_mst_l2c_hu_info_nt = 15208;</code>
     *
     * <pre>
     *胡牌后广播
     * </pre>
     */
    e_mst_l2c_hu_info_nt(28, 15208),
    /**
     * <code>e_mst_l2c_circle_result_nt = 15209;</code>
     *
     * <pre>
     *一局结束后 当前局详情广播
     * </pre>
     */
    e_mst_l2c_circle_result_nt(29, 15209),
    /**
     * <code>e_mst_l2c_player_enter_room_nt = 15210;</code>
     *
     * <pre>
     *玩家进入房间通知
     * </pre>
     */
    e_mst_l2c_player_enter_room_nt(30, 15210),
    /**
     * <code>e_mst_l2c_line_status_nt = 15211;</code>
     *
     * <pre>
     *玩家在线也离线情况
     * </pre>
     */
    e_mst_l2c_line_status_nt(31, 15211),
    /**
     * <code>e_mst_clend_index = 20000;</code>
     */
    e_mst_clend_index(32, 20000),
    ;

    /**
     * <code>e_mst_start_c2l = 10000;</code>
     *
     * <pre>
     *客户端到服务端
     * </pre>
     */
    public static final int e_mst_start_c2l_VALUE = 10000;
    /**
     * <code>e_mst_c2l_get_scene_info = 10001;</code>
     *
     * <pre>
     *得到房间
     * </pre>
     */
    public static final int e_mst_c2l_get_scene_info_VALUE = 10001;
    /**
     * <code>e_mst_c2l_leave_room = 10003;</code>
     *
     * <pre>
     *离开房间
     * </pre>
     */
    public static final int e_mst_c2l_leave_room_VALUE = 10003;
    /**
     * <code>e_mst_c2l_action = 10004;</code>
     *
     * <pre>
     *动作请求:摸牌，打牌，碰,明杠，暗杠,吃，胡
     * </pre>
     */
    public static final int e_mst_c2l_action_VALUE = 10004;
    /**
     * <code>e_mst_c2l_ready = 10005;</code>
     *
     * <pre>
     *请求准备操作
     * </pre>
     */
    public static final int e_mst_c2l_ready_VALUE = 10005;
    /**
     * <code>e_mst_c2l_gps = 10006;</code>
     *
     * <pre>
     *更新玩家的gps信息状态
     * </pre>
     */
    public static final int e_mst_c2l_gps_VALUE = 10006;
    /**
     * <code>e_mst_c2l_dis_room = 10007;</code>
     *
     * <pre>
     *请求解散
     * </pre>
     */
    public static final int e_mst_c2l_dis_room_VALUE = 10007;
    /**
     * <code>e_mst_c2l_dis_agree_or_not = 10008;</code>
     *
     * <pre>
     *同意或是不同意解散游戏
     * </pre>
     */
    public static final int e_mst_c2l_dis_agree_or_not_VALUE = 10008;
    /**
     * <code>e_mst_c2l_check_state = 10010;</code>
     *
     * <pre>
     *检测游戏状态
     * </pre>
     */
    public static final int e_mst_c2l_check_state_VALUE = 10010;
    /**
     * <code>e_mst_c2l_debug = 11000;</code>
     *
     * <pre>
     *控制
     * </pre>
     */
    public static final int e_mst_c2l_debug_VALUE = 11000;
    /**
     * <code>e_mst_start_l2c = 15000;</code>
     *
     * <pre>
     * 服务端到客户端---------------------------------------------------------------------------
     * </pre>
     */
    public static final int e_mst_start_l2c_VALUE = 15000;
    /**
     * <code>e_mst_l2c_get_scene_info_result = 15001;</code>
     *
     * <pre>
     *得到房间返回
     * </pre>
     */
    public static final int e_mst_l2c_get_scene_info_result_VALUE = 15001;
    /**
     * <code>e_mst_l2c_enter_room_result = 15002;</code>
     *
     * <pre>
     *进入房间
     * </pre>
     */
    public static final int e_mst_l2c_enter_room_result_VALUE = 15002;
    /**
     * <code>e_mst_l2c_leave_room_result = 15003;</code>
     *
     * <pre>
     *离开房间
     * </pre>
     */
    public static final int e_mst_l2c_leave_room_result_VALUE = 15003;
    /**
     * <code>e_mst_l2c_action_result = 15004;</code>
     *
     * <pre>
     *玩家通知请求返回		
     * </pre>
     */
    public static final int e_mst_l2c_action_result_VALUE = 15004;
    /**
     * <code>e_mst_l2c_ready_result = 15005;</code>
     *
     * <pre>
     *玩家广播准备状态
     * </pre>
     */
    public static final int e_mst_l2c_ready_result_VALUE = 15005;
    /**
     * <code>e_mst_l2c_gps_result = 15006;</code>
     *
     * <pre>
     *gps信息反馈
     * </pre>
     */
    public static final int e_mst_l2c_gps_result_VALUE = 15006;
    /**
     * <code>e_mst_l2c_dis_room_result = 15007;</code>
     *
     * <pre>
     *请求解散信息反馈
     * </pre>
     */
    public static final int e_mst_l2c_dis_room_result_VALUE = 15007;
    /**
     * <code>e_mst_l2c_dis_agree_or_not_result = 15008;</code>
     *
     * <pre>
     *玩家同意或是不同意解散游戏的广播
     * </pre>
     */
    public static final int e_mst_l2c_dis_agree_or_not_result_VALUE = 15008;
    /**
     * <code>e_mst_l2c_check_state_result = 15010;</code>
     *
     * <pre>
     *检测游戏状态
     * </pre>
     */
    public static final int e_mst_l2c_check_state_result_VALUE = 15010;
    /**
     * <code>e_mst_l2c_game_start_nt = 15200;</code>
     *
     * <pre>
     *广播玩家游戏开始了
     * </pre>
     */
    public static final int e_mst_l2c_game_start_nt_VALUE = 15200;
    /**
     * <code>e_mst_l2c_circle_start_nt = 15201;</code>
     *
     * <pre>
     *游戏开始
     * </pre>
     */
    public static final int e_mst_l2c_circle_start_nt_VALUE = 15201;
    /**
     * <code>e_mst_l2c_dice_nt = 15202;</code>
     *
     * <pre>
     *掷骰子
     * </pre>
     */
    public static final int e_mst_l2c_dice_nt_VALUE = 15202;
    /**
     * <code>e_mst_l2c_init_card_nt = 15203;</code>
     *
     * <pre>
     *初始化玩家手牌
     * </pre>
     */
    public static final int e_mst_l2c_init_card_nt_VALUE = 15203;
    /**
     * <code>e_mst_l2c_trun_index_nt = 15204;</code>
     *
     * <pre>
     *提示玩家指向
     * </pre>
     */
    public static final int e_mst_l2c_trun_index_nt_VALUE = 15204;
    /**
     * <code>e_mst_l2c_replace_flower_nt = 15205;</code>
     *
     * <pre>
     *补花
     * </pre>
     */
    public static final int e_mst_l2c_replace_flower_nt_VALUE = 15205;
    /**
     * <code>e_mst_l2c_player_action_nt = 15206;</code>
     *
     * <pre>
     *提示某个玩家的可以进行的保重
     * </pre>
     */
    public static final int e_mst_l2c_player_action_nt_VALUE = 15206;
    /**
     * <code>e_mst_l2c_action_nt = 15207;</code>
     *
     * <pre>
     *广播给所有的玩家，某个
     * </pre>
     */
    public static final int e_mst_l2c_action_nt_VALUE = 15207;
    /**
     * <code>e_mst_l2c_hu_info_nt = 15208;</code>
     *
     * <pre>
     *胡牌后广播
     * </pre>
     */
    public static final int e_mst_l2c_hu_info_nt_VALUE = 15208;
    /**
     * <code>e_mst_l2c_circle_result_nt = 15209;</code>
     *
     * <pre>
     *一局结束后 当前局详情广播
     * </pre>
     */
    public static final int e_mst_l2c_circle_result_nt_VALUE = 15209;
    /**
     * <code>e_mst_l2c_player_enter_room_nt = 15210;</code>
     *
     * <pre>
     *玩家进入房间通知
     * </pre>
     */
    public static final int e_mst_l2c_player_enter_room_nt_VALUE = 15210;
    /**
     * <code>e_mst_l2c_line_status_nt = 15211;</code>
     *
     * <pre>
     *玩家在线也离线情况
     * </pre>
     */
    public static final int e_mst_l2c_line_status_nt_VALUE = 15211;
    /**
     * <code>e_mst_clend_index = 20000;</code>
     */
    public static final int e_mst_clend_index_VALUE = 20000;


    public final int getNumber() { return value; }

    public static e_server_msg_type valueOf(int value) {
      switch (value) {
        case 10000: return e_mst_start_c2l;
        case 10001: return e_mst_c2l_get_scene_info;
        case 10003: return e_mst_c2l_leave_room;
        case 10004: return e_mst_c2l_action;
        case 10005: return e_mst_c2l_ready;
        case 10006: return e_mst_c2l_gps;
        case 10007: return e_mst_c2l_dis_room;
        case 10008: return e_mst_c2l_dis_agree_or_not;
        case 10010: return e_mst_c2l_check_state;
        case 11000: return e_mst_c2l_debug;
        case 15000: return e_mst_start_l2c;
        case 15001: return e_mst_l2c_get_scene_info_result;
        case 15002: return e_mst_l2c_enter_room_result;
        case 15003: return e_mst_l2c_leave_room_result;
        case 15004: return e_mst_l2c_action_result;
        case 15005: return e_mst_l2c_ready_result;
        case 15006: return e_mst_l2c_gps_result;
        case 15007: return e_mst_l2c_dis_room_result;
        case 15008: return e_mst_l2c_dis_agree_or_not_result;
        case 15010: return e_mst_l2c_check_state_result;
        case 15200: return e_mst_l2c_game_start_nt;
        case 15201: return e_mst_l2c_circle_start_nt;
        case 15202: return e_mst_l2c_dice_nt;
        case 15203: return e_mst_l2c_init_card_nt;
        case 15204: return e_mst_l2c_trun_index_nt;
        case 15205: return e_mst_l2c_replace_flower_nt;
        case 15206: return e_mst_l2c_player_action_nt;
        case 15207: return e_mst_l2c_action_nt;
        case 15208: return e_mst_l2c_hu_info_nt;
        case 15209: return e_mst_l2c_circle_result_nt;
        case 15210: return e_mst_l2c_player_enter_room_nt;
        case 15211: return e_mst_l2c_line_status_nt;
        case 20000: return e_mst_clend_index;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<e_server_msg_type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<e_server_msg_type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<e_server_msg_type>() {
            public e_server_msg_type findValueByNumber(int number) {
              return e_server_msg_type.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return game_guanyuan_protocols.GameGuanyuanDef.getDescriptor().getEnumTypes().get(0);
    }

    private static final e_server_msg_type[] VALUES = values();

    public static e_server_msg_type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private e_server_msg_type(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:game_guanyuan_protocols.e_server_msg_type)
  }

  /**
   * Protobuf enum {@code game_guanyuan_protocols.e_game_state}
   */
  public enum e_game_state
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>e_state_game_begin = 0;</code>
     *
     * <pre>
     *游戏开始
     * </pre>
     */
    e_state_game_begin(0, 0),
    /**
     * <code>e_state_game_bet = 1;</code>
     *
     * <pre>
     *押注期间
     * </pre>
     */
    e_state_game_bet(1, 1),
    /**
     * <code>e_state_game_award = 2;</code>
     *
     * <pre>
     *开奖期间
     * </pre>
     */
    e_state_game_award(2, 2),
    ;

    /**
     * <code>e_state_game_begin = 0;</code>
     *
     * <pre>
     *游戏开始
     * </pre>
     */
    public static final int e_state_game_begin_VALUE = 0;
    /**
     * <code>e_state_game_bet = 1;</code>
     *
     * <pre>
     *押注期间
     * </pre>
     */
    public static final int e_state_game_bet_VALUE = 1;
    /**
     * <code>e_state_game_award = 2;</code>
     *
     * <pre>
     *开奖期间
     * </pre>
     */
    public static final int e_state_game_award_VALUE = 2;


    public final int getNumber() { return value; }

    public static e_game_state valueOf(int value) {
      switch (value) {
        case 0: return e_state_game_begin;
        case 1: return e_state_game_bet;
        case 2: return e_state_game_award;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<e_game_state>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<e_game_state>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<e_game_state>() {
            public e_game_state findValueByNumber(int number) {
              return e_game_state.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return game_guanyuan_protocols.GameGuanyuanDef.getDescriptor().getEnumTypes().get(1);
    }

    private static final e_game_state[] VALUES = values();

    public static e_game_state valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private e_game_state(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:game_guanyuan_protocols.e_game_state)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027game_guanyuan_def.proto\022\027game_guanyuan" +
      "_protocols*\330\007\n\021e_server_msg_type\022\024\n\017e_ms" +
      "t_start_c2l\020\220N\022\035\n\030e_mst_c2l_get_scene_in" +
      "fo\020\221N\022\031\n\024e_mst_c2l_leave_room\020\223N\022\025\n\020e_ms" +
      "t_c2l_action\020\224N\022\024\n\017e_mst_c2l_ready\020\225N\022\022\n" +
      "\re_mst_c2l_gps\020\226N\022\027\n\022e_mst_c2l_dis_room\020" +
      "\227N\022\037\n\032e_mst_c2l_dis_agree_or_not\020\230N\022\032\n\025e" +
      "_mst_c2l_check_state\020\232N\022\024\n\017e_mst_c2l_deb" +
      "ug\020\370U\022\024\n\017e_mst_start_l2c\020\230u\022$\n\037e_mst_l2c" +
      "_get_scene_info_result\020\231u\022 \n\033e_mst_l2c_e",
      "nter_room_result\020\232u\022 \n\033e_mst_l2c_leave_r" +
      "oom_result\020\233u\022\034\n\027e_mst_l2c_action_result" +
      "\020\234u\022\033\n\026e_mst_l2c_ready_result\020\235u\022\031\n\024e_ms" +
      "t_l2c_gps_result\020\236u\022\036\n\031e_mst_l2c_dis_roo" +
      "m_result\020\237u\022&\n!e_mst_l2c_dis_agree_or_no" +
      "t_result\020\240u\022!\n\034e_mst_l2c_check_state_res" +
      "ult\020\242u\022\034\n\027e_mst_l2c_game_start_nt\020\340v\022\036\n\031" +
      "e_mst_l2c_circle_start_nt\020\341v\022\026\n\021e_mst_l2" +
      "c_dice_nt\020\342v\022\033\n\026e_mst_l2c_init_card_nt\020\343" +
      "v\022\034\n\027e_mst_l2c_trun_index_nt\020\344v\022 \n\033e_mst",
      "_l2c_replace_flower_nt\020\345v\022\037\n\032e_mst_l2c_p" +
      "layer_action_nt\020\346v\022\030\n\023e_mst_l2c_action_n" +
      "t\020\347v\022\031\n\024e_mst_l2c_hu_info_nt\020\350v\022\037\n\032e_mst" +
      "_l2c_circle_result_nt\020\351v\022#\n\036e_mst_l2c_pl" +
      "ayer_enter_room_nt\020\352v\022\035\n\030e_mst_l2c_line_" +
      "status_nt\020\353v\022\027\n\021e_mst_clend_index\020\240\234\001*T\n" +
      "\014e_game_state\022\026\n\022e_state_game_begin\020\000\022\024\n" +
      "\020e_state_game_bet\020\001\022\026\n\022e_state_game_awar" +
      "d\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
