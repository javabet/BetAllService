import "logic2world_msg_type.proto";
import "msg_info_def.proto";
import "msg_type_def.proto";
import "pump_type.proto";

package logic2world_protocols;

//游戏核心加载完毕 向world注册
message packetl2w_game_ready {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];		
	optional fixed32 game_id = 2;	//游戏id
	optional fixed32 game_ver = 3;	//游戏版本
}

//玩家登陆
message packetw2l_player_login {
	optional e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];		
	optional fixed32 sessionid = 2;
	optional msg_info_def.msg_account_info account_info = 3;	//账号信息
	optional msg_info_def.msg_account_info_ex account_info_ex = 4;	//扩展信息	
	optional int32 roomid = 5 [default = -1];
	optional fixed32 roomcard_number = 6;			//房号
	optional msg_info_def.msg_sel_roomcard_config sel_config = 7;	//已选房卡配置(创建房间时才有值)
	optional bytes room_cfg = 8;					//具体的房间规则，	与room_cfg_type一起使用
}

message packetl2w_player_login_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];		
	optional fixed32 playerid = 2;
	optional msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
	optional int32 result_param = 4 [default = 0];
}

//玩家退出
message packetw2l_player_logout {
	optional e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];	
	optional fixed32 playerid = 2;
}
 
message packetl2w_player_logout_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];		
	optional fixed32 playerid = 2;
	optional bool shutdown = 3 [default = false];   //关小游戏	
}

enum e_flag_enable //更新开关枚举(每个枚举各占一个二进制位)
{
	yyhd = 1;	//运营活动开关
	wxdl = 2;	//无限代理开关
}
	
// 通知改变玩家属性(双向) world <->logic
message packetw2l_change_player_property
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];	
	optional fixed32 playerid = 2;

	optional msg_info_def.msg_account_info change_info = 3; //改变的信息
	optional msg_info_def.msg_account_info_ex change_info_ex = 4;	//扩展信息
	optional int32 flag_enable = 5 [default = 0];	//更新开关标签（目前用于业绩相关更新）
}

// 广播游戏消息
message packetl2w_game_broadcast
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];	

	optional string game_msg = 2;
	optional int32 moneyNum = 3;
	optional int32 gameId = 4;
}

//分享通知
message packetl2w_share_notify
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_share_notify];
	optional fixed32 playerid = 2;
	optional fixed64 gold = 3;
}

//扣除库存
message packetw2l_deduct_stock
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_w2l_deduct_stock];
	optional fixed32 room_id = 2;
	optional fixed32 gold = 3;
}

//任务成就改变
message packetl2w_player_quest_change
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];	

	optional fixed32 player_id = 2;

	optional fixed32 quest_id = 3;	//任务成就ID

	optional fixed32 q_count = 4 [default = 1];	//数量

	optional fixed32 ex_param = 5 [default = 0] ; //扩展参数
}

// 通知绑定邀请人
message packetl2w_bind_inviter
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_bind_inviter];	
	optional fixed32 playerid = 2;
	optional fixed32 inviter = 3;
}

//活动数据变化
message packetl2w_player_activity_change
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_activity_change];
	optional int32 flag_enable = 2 [default = 0];	//更新开关标签（目前用于业绩及活动相关更新）	
	repeated msg_info_def.msg_gold_info golds = 3;	//金币变化
}

/////////////////////////////////////////////
// logic -> world
//房间信息
message msg_room_info
{
	optional int32 game_id		= 1;				//游戏id		
	optional int32 room_id		= 2;				//房间id
	optional string unique_id = 3;					//房间唯一ID
	optional int32 max_player = 4;					//最大人数
	optional int32 group_id = 5;					//组ID
	optional int32 agent_id = 6;					//代理ID 0公用 -1待分配
	optional int32 server_id = 7;
}

//刷新房间
message packetl2w_reflush_room
{
	optional e_server_msg_type packet_id = 1 [default = e_msg_l2w_reflush_room]; 
	optional int32 game_id = 2;		//游戏ID
}

//设置房间
message packetw2l_set_room
{
	optional e_server_msg_type packet_id = 1 [default = e_msg_w2l_set_room];
	optional int32 agent_id = 2;	//代理ID
	optional int32 room_id = 3;		//房间ID
}

//通知关闭,打开房间
message packetw2l_room_open
{
	optional e_server_msg_type packet_id = 1 [default = e_msg_w2l_room_open];
	optional int32 agent_id = 2;	//代理ID
	optional bool open = 3;			//true 打开  false关闭
}
