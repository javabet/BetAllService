package game_wzssc_protocols;

import "game_wzssc_def.proto"; 
import "msg_type_def.proto";

//游戏逻辑
//获取场景信息
message packetc2l_get_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
}

//结果信息
message msg_result_info{
	repeated int64 other_win_golds = 1;		//闲家输赢
	optional int64 self_gold = 2;			//自己金钱
	optional bool self_is_bet = 3;			//自己是否下注
	optional int64 self_pure_win_gold = 4;	//自己纯赢  去除抽水，含返还本金
}

//房间信息
message msg_scene_info{
	optional int32 roomid = 1;
	optional int32 scene_state = 2;
	optional int32 count_down = 3;
	repeated int32 bet_golds = 4;     //10个区域的总下注数 0:坦克 1:战士 2:刺客 3:法师 4:射手 5:辅助 6:无蓝 7:有蓝 8:男 9:女
	repeated int32 winner = 5;				            //命中的下注区域 0~9
	optional msg_result_info result_info = 6;			//结算结果
	optional int32 new_result = 7;					    //本局牌路记录  本局牌路记录  期号*100+结果
	optional int32 main_id = 8;				//局ID
	optional int32 online_cnt = 9;			//在线人数
	repeated int32 self_bet_golds = 10;     //10个区域自己的总下注数
}

//返回场景信息
message packetl2c_get_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
	optional msg_scene_info scene_info = 2;
}

//下注
message packetc2l_ask_bet_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
	optional int32 bet_index = 2;
	optional int64 bet_gold = 3;
	optional int32 chip_index = 4;
}

//下注结果
message packetl2c_bet_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	optional int32 bet_index = 3;
	optional int64 bet_gold = 4;
	optional int32 chip_index = 5;
}

//续压
message packetc2l_ask_continue_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
	repeated int64 bet_golds = 2;
}

//续压结果
message packetl2c_continue_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	repeated int64 bet_golds = 3;
}

//请求牌路
message packetc2l_ask_history_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
}

//请求牌路结果
message packetl2c_history_info{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
	repeated int32 history_infos = 2;	//牌路记录  期号*100+结果 每天重置
}

//广播准备状态
message packetl2c_bc_scene_prepare_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
	optional int32 count_down = 2;
}

//广播下注状态
message packetl2c_bc_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
	optional int32 count_down = 2;
}

message msg_master_bets {
	optional int32 player_id = 1;
	optional int64 player_bets = 2; 
}

//同步下注状态
message packetl2c_bc_sync_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
	repeated int32 bet_golds = 4;     //10个区域的总下注数
}

//广播发牌状态
message packetl2c_bc_scene_deal_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
	optional int32 count_down = 2;
	repeated int32 winner = 5;				            //命中的下注区域 0~9
	optional msg_result_info result_info = 6;			//结果  0~99
	optional int32 new_result = 7;					    //本局牌路记录  本局牌路记录  期号*100+结果
}

//调试
message packetl2c_debug {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
	optional int32 kill_cnt = 2 [default = 0];
	optional int32 kill_type = 3 [default = 0];  //1:定制 2:通杀
	optional int32 custom_result = 4;//定制的数据 0~99
}

message packetl2c_debug_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];	
}

message msg_player_betinfo {
	optional int32 player_id = 1;
	optional string player_name = 2;
	repeated int32 bet_gold = 3; 
	optional int64 player_gold = 4;	
}

message packetl2c_notify_sceneinfo {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
	optional int32 main_id = 2;
	optional int32 banker_type = 3;
	optional string banker_name = 4;
	repeated msg_player_betinfo player_betinfos = 5;
	optional int64 earn_gold = 6;
	optional int64 stock_gold = 7;
	optional int64 banker_gold = 8;    
	optional int32 count_down = 9;	
	optional int32 retain_cnt = 10;	
}

message packetl2c_online_cnt {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_online_cnt];
	optional int32 cnt = 2;
}
