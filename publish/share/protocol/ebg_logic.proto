package ebg_protocols;

import "ebg_def.proto"; 
import "msg_type_def.proto";

//游戏逻辑
//获取场景信息
message packetc2l_get_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
}

//庄家信息
message msg_banker_info{
	optional msg_player_info player_info = 1;
	optional int64 max_bet_gold = 2;
	optional bool can_snatch = 3;
	optional int32 snatch_gold = 4;
	optional int32 snatch_player_id = 5;
	optional int32 banker_cnt = 6;
	repeated int32 out_cards = 7;
}

//玩家信息
message msg_player_info{
	optional int32 player_id = 1;			//玩家ID
	optional string player_name = 2;		//玩家昵称
	optional int32 head_frame = 3;			//头像框
	optional string head_custom = 4;		//玩家头像
	optional int64 player_gold = 5;			//玩家金币
	optional int32 player_sex = 6;			// 玩家性别	
	optional int32 vip_level = 7;			// Vip等级

	optional int32 win_count = 8;			// 获胜数
	optional int32 bets = 9;				// 下注数
	optional int32 play_cnt = 10;			// 局数
	
	repeated int32 other_bets = 11;			// 5个区域 下注
	repeated int32 other_win = 12;			// 5个区域 赢	
}

//下注信息
message msg_bet_info{
	repeated int64 self_bet_golds = 1;
	//repeated int64 total_bet_golds = 2;
	repeated msg_betinfo bets = 2; 	
}

//结果信息
message msg_result_info{
	optional int64 banker_win_gold = 1;		//庄家输赢
	repeated int64 other_win_golds = 2;		//闲家输赢
	optional int64 self_win_gold = 3;		//自己输赢
	optional int64 self_gold = 4;			//自己金钱
	optional bool self_is_bet = 5;			//自己是否下注
	optional int64 self_pure_win_gold = 6;	//自己纯赢
}

//房间信息
message msg_scene_info{
	optional int32 roomid = 1;
	optional int32 scene_state = 2;
	optional int32 count_down = 3;
	optional msg_banker_info banker_info = 4;			//准备
	optional msg_bet_info bet_info = 5;					//下注
	repeated int32 cards_infos = 6;						//3家 + 庄家 [xxyy]xx,yy,1到9筒,10为白皮
	optional msg_result_info result_info = 7;			//结果
	optional int32 main_id = 8;							//局ID
	optional int32 dice_num = 9;						// [xy]x,y,1到6点	
	optional int64 self_gold = 10;						//自己金钱
	optional bool free_room = 11;						//是否试玩场
}

//历史牌路
message msg_history_info{
	repeated int32 is_win = 1;						// 3家 (0:输, 1:赢, 2:和)
	repeated int32 cards_id = 2;					// 3家 + 庄家 [xxyy]xx,yy,1到9筒,10为白皮
}

//返回场景信息
message packetl2c_get_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
	optional msg_scene_info scene_info = 2;
}

//下注
message packetc2l_ask_bet_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
	optional int32 bet_index = 2;
	optional int64 bet_gold = 3;
}

//下注结果
message packetl2c_bet_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	optional int32 bet_index = 3;
	optional int64 bet_gold = 4;
}

//续压
message packetc2l_ask_continue_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
	repeated int64 bet_golds = 2;
}

//续压结果
message packetl2c_continue_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	repeated int64 bet_golds = 3;
}

//清空
message packetc2l_ask_clear_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
}

//清空结果
message packetl2c_clear_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//请求上庄
message packetc2l_ask_apply_banker {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_apply_banker];
}

//请求上庄结果
message packetl2c_apply_banker_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_apply_banker_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//申请离开上庄列表
message packetc2l_leave_list_banker {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_list_banker];
}

//申请离开上庄列表返回
message packetl2c_leave_list_banker_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_list_banker];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success ];
}

//请求抢庄
message packetc2l_ask_snatch_banker {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_snatch_banker];
	optional int32 snatch_gold = 2;
}

//请求抢庄结果
message packetl2c_snatch_banker_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_snatch_banker_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//请求抢庄结果
message packetl2c_banker_success {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_banker_success];
	optional int32 gold = 2 [default = 0];
}

//抢庄广播
message packetl2c_bc_snatch_banker {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_snatch_banker];
	optional int32 snatch_player_id = 2;
	optional int32 snatch_gold = 3;
}

//请求下庄
message packetc2l_ask_leave_banker {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_leave_banker];
	optional bool force = 2;		//强制下庄标志
}

//请求下庄结果
message packetl2c_leave_banker_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	optional int32 cost_ticket = 3 [default = 0];
}

//请求庄家列表
message packetc2l_ask_bankerlist {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bankerlist];
}

//庄家列表信息
message packetl2c_bankerlist_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bankerlist_result];
	repeated msg_player_info player_infos = 2;
}

//请求玩家列表
message packetc2l_ask_playerlist {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
}

//玩家列表结果
message packetl2c_playerlist_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
	repeated msg_player_info player_infos = 2;
}

//请求牌路
message packetc2l_ask_history_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
}

//请求牌路结果
message packetl2c_history_info{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
	optional int32 total_count = 2;
	repeated int32 win_counts = 3;
	repeated int32 lose_counts = 4;
	repeated msg_history_info history_infos = 5;
}

//上下庄信息
message packetl2c_banker_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_banker_info];
}

//广播准备状态
message packetl2c_bc_scene_prepare_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
	optional int32 count_down = 2;
	optional int32 dice_num = 3;				// [xy]x,y,1到6点
	optional msg_banker_info banker_info = 4;
}

//广播下注状态
message packetl2c_bc_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
	optional int32 count_down = 2;
}

message msg_master_bets {
	optional int32 player_id = 1;
	optional int64 player_bets = 2; 
}

message msg_betinfo {
	optional int64 bet_golds = 1; 
	repeated msg_master_bets master_bets = 2; 
}

//同步下注状态
message packetl2c_bc_sync_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
	repeated msg_betinfo bets = 4; 
}

//广播发牌状态
message packetl2c_bc_scene_deal_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
	optional int32 count_down = 2;
	repeated int32 cards_infos = 3;	// 3家 + 庄家 [xxyy]xx,yy,1到9筒,10为白皮
}

//参与开奖玩家
message msg_player_award {
	optional int32 player_id = 1;	//玩家ID
	optional string name = 2;		//昵称
	optional int64 gold = 3;		//输赢金币
	optional int64 pure_gold = 4;	//纯赢金币
}

//广播结果状态
message packetl2c_bc_scene_result_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
	optional int32 count_down = 2;
	optional msg_result_info result_info = 3;
	repeated msg_player_award player_list = 4;
}

//调试
message packetl2c_debug {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
	optional int32 kill_cnt = 2 [default = 0];
	optional int32 kill_type = 3 [default = 0];  //2:通杀
	repeated int32 custom_cards = 4;//定制的数据 不支持
}

message packetl2c_debug_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];	
}

message msg_player_betinfo {
	optional int32 player_id = 1;
	optional string player_name = 2;
	repeated int32 bet_gold = 3; 
	optional int64 player_gold = 4;	
}

message packetl2c_notify_sceneinfo {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
	optional int32 main_id = 2;
	optional int32 banker_type = 3;
	optional string banker_name = 4;
	repeated msg_player_betinfo player_betinfos = 5;
	optional int64 earn_gold = 6;
	optional int64 stock_gold = 7;
	optional int64 banker_gold = 8;    
	optional int32 count_down = 9;	
	optional int32 retain_cnt = 10;	
}

message packetl2c_attention_needLeave {
	optional e_server_msg_type packet_id = 1 [default = e_mst_attention_needLeave];
}