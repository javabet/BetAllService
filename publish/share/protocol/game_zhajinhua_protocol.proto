package game_zhajinhua_protocols;

import "game_zhajinhua_def.proto"; 
import "msg_type_def.proto";

//获得房间信息
message packetc2l_get_room_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
}

//房间信息返回
message packetl2c_get_room_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
	repeated int32 room_list = 2;	
}

//检测游戏状态		//重连之后判断是否在桌子中
message packetc2l_check_state {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
}

//检测状态
message packetl2c_check_state_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
	optional bool is_intable = 2 [default = false];//是否在桌子中
}

// 进入桌子
message packetc2l_join_table 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
	optional int32 roomId = 2;
}

// 进入桌子返回
message packetl2c_join_table_result
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 table_id = 3;
	optional e_table_state table_state = 4;			//游戏状态
}

//进入房间广播
message packetl2c_bc_join_room {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_join_room];
	optional msg_player_info player_info = 2;
}


// 请求桌子内场景信息
message packetc2l_get_table_scene_info
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
}

// 请求桌子内场景信息结果
message packetl2c_get_table_scene_info_result
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 room_id = 3;							//房间ID
	optional int32 table_id = 4;						//桌子ID
	optional e_table_state table_state = 5;				//游戏状态
	optional int32 total_bet = 6;						//总注
	optional int32 cur_round = 7;						//当前轮数
	optional int32 declare_player = 8 [default = 0];	//当前表态玩家
	optional int32 time = 9;							//时间
	repeated msg_player_info player_list = 10;			//玩家列表
	repeated msg_player_cards player_card_list = 11;	//玩家牌列表
	optional int32 cur_bet = 12;						//当前单注
}

// 离开桌子
message packetc2l_leave_table 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
}

// 离开桌子返回
message packetl2c_leave_table_result 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 player_gold = 3;
	optional int32 type = 4[default = 1];	//1主动退出,2超时踢出
}

//玩家离开桌子广播
message packetl2c_bc_leave_table
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_leave_table];
	optional int32 player_id = 2;	//离开的玩家ID
}

//游戏开始
message packetl2c_game_start {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
}

//玩家准备
message packetc2l_set_ready {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_set_ready];
}

//玩家准备结果
message packetl2c_set_ready_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_set_ready_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 player_id = 3;			//玩家ID
}

//玩家表态
message packetc2l_player_declare {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_declare];
	
	optional e_player_declare declare = 2;	//表态类型

	optional int32 chips = 3;			//下注筹码
}

//玩家表态结果
message packetl2c_player_declare_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_declare_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional e_player_declare declare = 3;	//表态类型
	optional int32 chips = 4;				//筹码
	optional int32 player_id = 5;			//玩家ID
	repeated int32 cards = 6;				//牌列表
	optional int32 card_type = 7;			//牌型
}

//通知玩家表态
message packetl2c_notify_declare {
	optional e_server_msg_type packet_id = 1 [default = e_mst_12c_notify_declare];

	optional int32 player_id = 2;			//玩家ID
	optional int32 cur_round = 3;			//当前轮数
}

//玩家比牌
message packetc2l_compare_cards {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_compare_cards];
	
	optional int32 player_id = 2;	//对手ID
}

//玩家比牌结果
message packetl2c_compare_cards_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_compare_cards_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 chips = 3;	//比牌筹码
	optional int32 player_id = 4;	//发起比牌玩家ID
	optional int32 win_player = 5;	//获胜玩家的ID
	repeated msg_compare_cards compare_result = 6;		//比牌结果
}

//游戏结算
message packetl2c_game_settlement {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_settlement];
	repeated msg_player_settlement player_settlement_info = 2;		//玩家结算信息
}

//换桌
message packetc2l_change_table {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
}

//换桌返回
message packetl2c_change_table_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_change_table_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
}

//玩家亮牌
message packetc2l_show_cards {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_cards];
}

//玩家亮牌通知
message packetl2c_notify_show_cards {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_show_cards];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];

	optional int32 player_id = 3;			//玩家ID
	repeated int32 cards = 4;				//牌列表
}

