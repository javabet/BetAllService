package game_srmj_r_protocols;

import "game_srmj_r_def.proto"; 
import "msg_type_def.proto"; 

//玩家信息
message msg_player_info{
	optional int32 player_id = 1;			//玩家ID
	optional string player_name = 2;		//玩家昵称
	optional int32 head_frame = 3;			//头像框
	optional string head_custom = 4;		//玩家头像
	optional int64 player_gold = 5;			//玩家金币
	optional int32 player_sex = 6;			//玩家性别	
	optional int32 vip_level = 7;			//Vip等级
	
	optional int32 chair_idx = 8;			//座位号
	optional bool ready = 9;				//准备
}

//检测游戏状态		//重连之后判断是否在桌子中
message packetc2l_check_state {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
}

//检测状态
message packetl2c_check_state_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
	optional int32 result = 2 [default = 0]; // 0:不在,1:在room中,2:在table中
}

//获取场景信息
message packetc2l_get_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
}

//场景信息返回
message packetl2c_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
	optional int32 room_type = 2; 				//房间类型	
	optional e_game_status status = 3;			//桌子状态
	
	
	optional int32 banker_chair_id = 4;			//庄玩家
	optional int32 current_user = 5;			//当前玩家
	optional int32 out_card = 6;				//当前出卡[抢卡时有效]
	optional int32 action_code = 7;				//e_action_code[抢卡时有效]
	optional int32 remain_seconds = 8;			//剩余秒数
	repeated bool user_trustee = 9;				//[4]托管信息
	repeated cards_data hu_cards = 10;			//[4]已胡牌
	repeated cards_data hand_cards = 11;		//[4]手牌
	repeated cards_data river_cards = 12;		//[4]牌河
	repeated pile_cards_data pile_cards = 13;	//[4]结构扑克
	repeated int32 pass_times = 14;				//[4]过胡倍数
	repeated bool exchanged = 15;				//[4]已换三张
	repeated int32 vacancy = 16;				//[4]定缺 0:万子,1:索子,2:同子,x:未定
	optional int32 dice_count = 17;				//骰子点数
	repeated win_result hu_list = 18;			//已胡流水
	optional int32 used_card_cnt = 19;			//已摸牌数
	
	
	optional packetl2c_game_end game_end = 20;
	optional int32 status_remain_sec = 21;		//桌子状态剩余秒数	
	optional int32 status_turn_sec = 22;		//桌子状态秒数
	optional int32 room_id = 23;				//房卡id
}


//玩家托管请求
message packetc2l_user_trustee {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
	optional bool trustee = 2;
}

//玩家托管通知
message packetl2c_user_trustee_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
	optional int32 chair_id = 2;
	optional bool trustee = 3;
	optional int32 remain_seconds = 4;		//剩余秒数, trustee == false 时有效
}

//玩家已准备
message packetc2l_ready {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
}

//玩家已准备通知
message packetl2c_ready {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_ready];
	optional int32 chair_id = 2;
}

//房主踢人
message packetc2l_kick_out {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_kick_out];
	optional int32 chair_id = 2;
}

//状态通知
message packetl2c_status_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_status_notify];
	optional e_game_status status = 2;			//桌子状态
	optional int32 status_remain_sec = 3;		//桌子状态剩余秒数	
}

//发送玩家信息
message packetl2c_send_all_playerinfos {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
	repeated msg_player_info player_info = 2;		//[2]玩家信息
}

message pile_card_data {
	optional int32 action_code = 1;			//e_action_code
	repeated int32 cards = 2;				//[3-4]扑克列表
	optional bool ming_gang = 3;			//明杠
	optional bool jia_gang = 4;				//加杠	
	optional int32 provider = 5;			//
}

message pile_cards_data {
	repeated pile_card_data card = 1;		//[0-4]结构卡列表
}

message card_data {
	optional int32 card_id = 1;				//卡id
	optional int32 card_val = 2;			//对家看着是背卡无此值
}

message cards_data {
	repeated card_data card = 1;			//[1-13]扑克列表
}

//游戏开始
message packetl2c_game_start {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
	optional int32 dice_count = 2;			//骰子点数
	optional int32 banker_user = 3;			//庄家用户
	//optional int32 user_action = 4;			//用户动作 e_action_code
	repeated cards_data cards = 5;			//[2]2家扑克列表
//	repeated int32 bot_out = 6;				//
}

//出牌数据包
message packetc2l_out_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
	optional int32 card_id = 2;				//卡id
}

//出牌通知
message packetl2c_out_card_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
	optional int32 action_user = 2;			//当前用户
	optional card_data card = 3;			//卡数据
}

//操作提示
message packetl2c_operate_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
	optional int32 user_action = 2;				//用户动作 e_action_code [x(要做动作), 0(等待)]
	optional int32 card_val = 3;				//扑克数据
}

//用户操作
message packetc2l_operate_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
	optional int32 user_action = 2;				//用户动作 e_action_code
	optional int32 card_id = 3;					//卡id(主动抢卡有效)
}

//操作通知
message packetl2c_operate_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
	optional int32 action_user = 2;				//当前用户
	optional int32 user_action = 3;				//用户动作 e_action_code
	optional int32 provide_user = 4;			//供应用户[胡:非自摸有效]
	optional int32 card_val = 5;				//卡值[胡:非自摸有效]
	repeated card_data pile_cards = 6;			//[3-4]结构扑克，如card_id不为0，要从手卡中删除
	optional win_result hu_data = 7;			//胡数据
}

//添加已胡流水
message packetl2c_add_win_list {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_win_list];
	optional win_result hu_data = 2;			//胡数据
}

//发送扑克
message packetl2c_send_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
	optional int32 current_user = 2;			//当前玩家
	optional card_data card = 3;				//扑克数据
//	optional int32 bot_ting_out = 4;			//
//	optional bool bot_pass_hu = 5;				//
}

//补花请求
//message packetc2l_bu_hua {
//	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_bu_hua];
//}

//补花通知
//message packetl2c_bu_hua_notify {
//	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bu_hua_notify];
//	optional int32 current_user = 2;		//当前玩家
//	optional card_data hua_card = 3;		//花
//}

//过胡通知
//message packetl2c_pass_hu_notify {
//	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_hu_notify];
//	optional int32 pass_idx = 2;			//过胡玩家
//	optional int32 pass_times = 3;			//过胡倍数
//}

//过胡数据
//message packetl2c_other_player_cards {
//	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_other_player_cards];
//	repeated int32 chairs = 2;				//列表
//	repeated cards_data cards = 3;			//[1-13]扑克列表
//}

//输家详情
message lose_result {
	optional int32 lose_idx = 1;			//输家idx
	optional int32 lose_account = 2;		//输金币数
	optional bool lose_limited = 3;			//输钱限定
}

//赢家详情
message win_result {
	optional int32 win_idx = 1;				//赢家idx
	optional int32 win_account = 2;			//赢金币数
	optional bool win_limited = 3;			//获利限定
	repeated lose_result lose = 4;			//输家详情

	optional int32 fan_cnt = 5;				//总番数
	repeated uint32 result1 = 6;			//番型位
	repeated uint32 result2 = 7;			//番型位
	repeated uint32 result3 = 8;			//番型位

	optional int32 win_root_cnt = 9;		//赢家根
	optional int32 user_action = 10;		//e_ac_hu, e_ac_wind, e_ac_add_gang, e_ac_rain, e_ac_tax, e_ac_scream, e_ac_pig
}

//游戏结束
message packetl2c_game_end {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
	repeated int32 game_score = 3;			//[4]当前金币
	repeated int32 win_account = 4;			//[4]输赢金币
	repeated int32 win_fee = 5;				//[4]赢家抽水
	repeated cards_data hand_cards = 6;		//[4]4家手卡
	repeated pile_cards_data pile_cards = 7;//[4]4家结构卡
	repeated cards_data hu_cards = 8;		//[4]4家已胡牌
	repeated win_result hu_list = 9;		//已胡流水
}

//玩家通知消息
message packetl2c_game_notify {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
	optional e_notify_type notify_type = 2;
	optional int32 notify_param = 3;
}

//玩家信息
message gm_player_info {
	optional int32 player_id = 1;			//玩家ID
	optional string player_name = 2;		//玩家昵称
	optional int64 player_gold = 3;			//玩家金币
	optional int32 player_room = 4;			//玩家房间
	optional int64 player_profit = 5;		//玩家赢利
	optional int64 player_kill_type = 6;	//(0:弱, 1:强)
	optional int64 player_kill_cnt = 7;		//
}

//换三张 请求
message packetc2l_exchange_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_exchange_card];
	repeated int32 card = 2;			//[3]id列表
}

//换三张信息
message exchange_card_data {
	repeated int32 old_card_id = 1;
	repeated int32 new_card_id = 2;
	repeated int32 new_card_val = 3;
}

//换三张 结果
message packetl2c_exchange_card {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_exchange_card];
	optional int32 exchange_type = 2;			//0:顺时针,1:逆时针,2:对家呼唤
	repeated exchange_card_data cards = 3;		//[4]
}

//定缺 请求
message packetc2l_decide_vacancy {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_decide_vacancy];
	optional int32 type = 2;			//0:万子,1:索子,2:同子
}

//定缺 结果
message packetl2c_decide_vacancy {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_decide_vacancy];
	repeated int32 types = 2;			//[4] 0x00:万子,0x10:索子,0x20:同子
}
